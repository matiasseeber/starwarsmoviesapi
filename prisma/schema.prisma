generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                        Int       @id @default(autoincrement())
  username                  String    @unique @db.VarChar(50)
  email                     String    @unique @db.VarChar(100)
  password                  String?   @db.VarChar(256)
  verification_code         String?   @db.VarChar(20)
  verificated_at            DateTime? @db.Timestamp(6)
  verification_code_sent_at DateTime? @db.Timestamp(6)
  created_at                DateTime? @default(now()) @db.Timestamp(6)
  updated_at                DateTime? @db.Timestamp(6)
  is_admin                  Boolean?  @default(false)
  logins                    logins[]

  @@unique([username, email], map: "unique_username_email")
}

model logins {
  id            Int       @id @default(autoincrement())
  user_id       Int
  refresh_token String    @db.VarChar(30)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  users         users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model characters {
  id         Int       @id @default(autoincrement())
  url        String?
  active     Boolean?  @default(true)
  film_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  films      movies?   @relation(fields: [film_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model planets {
  id         Int       @id @default(autoincrement())
  url        String?
  active     Boolean?  @default(true)
  film_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  films      movies?   @relation(fields: [film_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model starships {
  id         Int       @id @default(autoincrement())
  url        String?
  active     Boolean?  @default(true)
  film_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  films      movies?   @relation(fields: [film_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model vehicles {
  id         Int       @id @default(autoincrement())
  url        String?
  active     Boolean?  @default(true)
  film_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  films      movies?   @relation(fields: [film_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model movies {
  id            Int          @id(map: "films_pkey") @default(autoincrement())
  title         String?      @db.VarChar(256)
  episode_id    Int?
  opening_crawl String?
  director      String?      @db.VarChar(256)
  producer      String?      @db.VarChar(256)
  active        Boolean?     @default(true)
  created_at    DateTime?    @default(now()) @db.Timestamp(6)
  updated_at    DateTime?    @db.Timestamp(6)
  release_date  DateTime?    @db.Timestamp(6)
  characters    characters[]
  planets       planets[]
  starships     starships[]
  vehicles      vehicles[]
}
